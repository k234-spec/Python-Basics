# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021 <a
# href="https://www.kennethreitz.org/projects">Kenneth Reitz</a> &amp; <a
# href="https://realpython.com">Real Python</a>. <a
# href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA
# 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-04 19:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../writing/gotchas.rst:5
msgid "Common Gotchas"
msgstr ""

#: ../../writing/gotchas.rst:9
msgid ""
"For the most part, Python aims to be a clean and consistent language that"
" avoids surprises. However, there are a few cases that can be confusing "
"for newcomers."
msgstr ""

#: ../../writing/gotchas.rst:13
msgid ""
"Some of these cases are intentional but can be potentially surprising. "
"Some could arguably be considered language warts. In general, what "
"follows is a collection of potentially tricky behavior that might seem "
"strange at first glance, but are generally sensible, once you're aware of"
" the underlying cause for the surprise."
msgstr ""

#: ../../writing/gotchas.rst:25
msgid "Mutable Default Arguments"
msgstr ""

#: ../../writing/gotchas.rst:27
msgid ""
"Seemingly the *most* common surprise new Python programmers encounter is "
"Python's treatment of mutable default arguments in function definitions."
msgstr ""

#: ../../writing/gotchas.rst:31 ../../writing/gotchas.rst:105
msgid "What You Wrote"
msgstr ""

#: ../../writing/gotchas.rst:40 ../../writing/gotchas.rst:113
msgid "What You Might Have Expected to Happen"
msgstr ""

#: ../../writing/gotchas.rst:50
msgid ""
"A new list is created each time the function is called if a second "
"argument isn't provided, so that the output is::"
msgstr ""

#: ../../writing/gotchas.rst:57 ../../writing/gotchas.rst:130
msgid "What Actually Happens"
msgstr ""

#: ../../writing/gotchas.rst:64
msgid ""
"A new list is created *once* when the function is defined, and the same "
"list is used in each successive call."
msgstr ""

#: ../../writing/gotchas.rst:67
msgid ""
"Python's default arguments are evaluated *once* when the function is "
"defined, not each time the function is called (like it is in say, Ruby). "
"This means that if you use a mutable default argument and mutate it, you "
"*will* and have mutated that object for all future calls to the function "
"as well."
msgstr ""

#: ../../writing/gotchas.rst:73 ../../writing/gotchas.rst:169
msgid "What You Should Do Instead"
msgstr ""

#: ../../writing/gotchas.rst:75
msgid ""
"Create a new object each time the function is called, by using a default "
"arg to signal that no argument was provided (:py:data:`None` is often a "
"good choice)."
msgstr ""

#: ../../writing/gotchas.rst:86
msgid "Do not forget, you are passing a *list* object as the second argument."
msgstr ""

#: ../../writing/gotchas.rst:89 ../../writing/gotchas.rst:192
msgid "When the Gotcha Isn't a Gotcha"
msgstr ""

#: ../../writing/gotchas.rst:91
msgid ""
"Sometimes you can specifically \"exploit\" (read: use as intended) this "
"behavior to maintain state between calls of a function. This is often "
"done when writing a caching function."
msgstr ""

#: ../../writing/gotchas.rst:98
msgid "Late Binding Closures"
msgstr ""

#: ../../writing/gotchas.rst:100
msgid ""
"Another common source of confusion is the way Python binds its variables "
"in closures (or in the surrounding global scope)."
msgstr ""

#: ../../writing/gotchas.rst:120
msgid ""
"A list containing five functions that each have their own closed-over "
"``i`` variable that multiplies their argument, producing::"
msgstr ""

#: ../../writing/gotchas.rst:140
msgid "Five functions are created; instead all of them just multiply ``x`` by 4."
msgstr ""

#: ../../writing/gotchas.rst:142
msgid ""
"Python's closures are *late binding*. This means that the values of "
"variables used in closures are looked up at the time the inner function "
"is called."
msgstr ""

#: ../../writing/gotchas.rst:146
msgid ""
"Here, whenever *any* of the returned functions are called, the value of "
"``i`` is looked up in the surrounding scope at call time. By then, the "
"loop has completed and ``i`` is left with its final value of 4."
msgstr ""

#: ../../writing/gotchas.rst:150
msgid ""
"What's particularly nasty about this gotcha is the seemingly prevalent "
"misinformation that this has something to do with :ref:`lambdas "
"<python:lambda>` in Python. Functions created with a ``lambda`` "
"expression are in no way special, and in fact the same exact behavior is "
"exhibited by just using an ordinary ``def``:"
msgstr ""

#: ../../writing/gotchas.rst:171
msgid ""
"The most general solution is arguably a bit of a hack. Due to Python's "
"aforementioned behavior concerning evaluating default arguments to "
"functions (see :ref:`default_args`), you can create a closure that binds "
"immediately to its arguments by using a default arg like so:"
msgstr ""

#: ../../writing/gotchas.rst:181
msgid "Alternatively, you can use the functools.partial function:"
msgstr ""

#: ../../writing/gotchas.rst:194
msgid ""
"Sometimes you want your closures to behave this way. Late binding is good"
" in lots of situations. Looping to create unique functions is "
"unfortunately a case where they can cause hiccups."
msgstr ""

#: ../../writing/gotchas.rst:201
msgid "Bytecode (.pyc) Files Everywhere!"
msgstr ""

#: ../../writing/gotchas.rst:203
msgid ""
"By default, when executing Python code from files, the Python interpreter"
" will automatically write a bytecode version of that file to disk, e.g. "
"``module.pyc``."
msgstr ""

#: ../../writing/gotchas.rst:207
msgid ""
"These ``.pyc`` files should not be checked into your source code "
"repositories."
msgstr ""

#: ../../writing/gotchas.rst:209
msgid ""
"Theoretically, this behavior is on by default for performance reasons. "
"Without these bytecode files, Python would re-generate the bytecode every"
" time the file is loaded."
msgstr ""

#: ../../writing/gotchas.rst:215
msgid "Disabling Bytecode (.pyc) Files"
msgstr ""

#: ../../writing/gotchas.rst:217
msgid ""
"Luckily, the process of generating the bytecode is extremely fast, and "
"isn't something you need to worry about while developing your code."
msgstr ""

#: ../../writing/gotchas.rst:220
msgid "Those files are annoying, so let's get rid of them!"
msgstr ""

#: ../../writing/gotchas.rst:226
msgid ""
"With the ``$PYTHONDONTWRITEBYTECODE`` environment variable set, Python "
"will no longer write these files to disk, and your development "
"environment will remain nice and clean."
msgstr ""

#: ../../writing/gotchas.rst:230
msgid "I recommend setting this environment variable in your ``~/.profile``."
msgstr ""

#: ../../writing/gotchas.rst:233
msgid "Removing Bytecode (.pyc) Files"
msgstr ""

#: ../../writing/gotchas.rst:235
msgid "Here's nice trick for removing all of these files, if they already exist::"
msgstr ""

#: ../../writing/gotchas.rst:239
msgid ""
"Run that from the root directory of your project, and all ``.pyc`` files "
"will suddenly vanish. Much better."
msgstr ""

#: ../../writing/gotchas.rst:245
msgid "Version Control Ignores"
msgstr ""

#: ../../writing/gotchas.rst:247
msgid ""
"If you still need the ``.pyc`` files for performance reasons, you can "
"always add them to the ignore files of your version control repositories."
" Popular version control systems have the ability to use wildcards "
"defined in a file to apply special rules."
msgstr ""

#: ../../writing/gotchas.rst:252
msgid ""
"An ignore file will make sure the matching files don't get checked into "
"the repository. Git_ uses ``.gitignore`` while Mercurial_ uses "
"``.hgignore``."
msgstr ""

#: ../../writing/gotchas.rst:258
msgid "At the minimum your ignore files should look like this."
msgstr ""

#: ../../writing/gotchas.rst:266
msgid ""
"You may wish to include more files and directories depending on your "
"needs. The next time you commit to the repository, these files will not "
"be included."
msgstr ""

