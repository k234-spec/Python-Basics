# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2021 <a
# href="https://www.kennethreitz.org/projects">Kenneth Reitz</a> &amp; <a
# href="https://realpython.com">Real Python</a>. <a
# href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA
# 3.0</a>
# This file is distributed under the same license as the pythonguide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-04 19:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dev/env.rst:2
msgid "Your Development Environment"
msgstr ""

#: ../../dev/env.rst:8
msgid "Text Editors"
msgstr ""

#: ../../dev/env.rst:10
msgid ""
"Just about anything that can edit plain text will work for writing Python"
" code; however, using a more powerful editor may make your life a bit "
"easier."
msgstr ""

#: ../../dev/env.rst:15
msgid "Vim"
msgstr ""

#: ../../dev/env.rst:17
msgid ""
"Vim is a text editor which uses keyboard shortcuts for editing instead of"
" menus or icons. There are a couple of plugins and settings for the Vim "
"editor to aid Python development. If you only develop in Python, a good "
"start is to set the default settings for indentation and line-wrapping to"
" values compliant with :pep:`8`. In your home directory, open a file "
"called :file:`.vimrc` and add the following lines::"
msgstr ""

#: ../../dev/env.rst:32
msgid ""
"With these settings, newlines are inserted after 79 characters and "
"indentation is set to 4 spaces per tab. If you also use Vim for other "
"languages, there is a handy plugin called indent_, which handles "
"indentation settings for Python source files."
msgstr ""

#: ../../dev/env.rst:37
msgid ""
"There is also a handy syntax plugin called syntax_ featuring some "
"improvements over the syntax file included in Vim 6.1."
msgstr ""

#: ../../dev/env.rst:40
msgid ""
"These plugins supply you with a basic environment for developing in "
"Python. To get the most out of Vim, you should continually check your "
"code for syntax errors and PEP8 compliance. Luckily pycodestyle_ and "
"Pyflakes_ will do this for you. If your Vim is compiled with ``+python`` "
"you can also utilize some very handy plugins to do these checks from "
"within the editor."
msgstr ""

#: ../../dev/env.rst:46
msgid ""
"For PEP8 checking and pyflakes, you can install vim-flake8_. Now you can "
"map the function ``Flake8`` to any hotkey or action you want in Vim. The "
"plugin will display errors at the bottom of the screen, and provide an "
"easy way to jump to the corresponding line. It's very handy to call this "
"function whenever you save a file. In order to do this, add the following"
" line to your :file:`.vimrc`::"
msgstr ""

#: ../../dev/env.rst:55
msgid ""
"If you are already using syntastic_, you can set it to run Pyflakes on "
"write and show errors and warnings in the quickfix window. An example "
"configuration to do that which also shows status and warning messages in "
"the statusbar would be::"
msgstr ""

#: ../../dev/env.rst:68
msgid "Python-mode"
msgstr ""

#: ../../dev/env.rst:70
msgid ""
"Python-mode_ is a complex solution for working with Python code in Vim. "
"It has:"
msgstr ""

#: ../../dev/env.rst:73
msgid ""
"Asynchronous Python code checking (``pylint``, ``pyflakes``, "
"``pycodestyle``, ``mccabe``) in any combination"
msgstr ""

#: ../../dev/env.rst:74
msgid "Code refactoring and autocompletion with Rope"
msgstr ""

#: ../../dev/env.rst:75
msgid "Fast Python folding"
msgstr ""

#: ../../dev/env.rst:76
msgid "Virtualenv support"
msgstr ""

#: ../../dev/env.rst:77
msgid "Search through Python documentation and run Python code"
msgstr ""

#: ../../dev/env.rst:78
msgid "Auto pycodestyle_ error fixes"
msgstr ""

#: ../../dev/env.rst:80
msgid "And more."
msgstr ""

#: ../../dev/env.rst:83
msgid "SuperTab"
msgstr ""

#: ../../dev/env.rst:85
msgid ""
"SuperTab_ is a small Vim plugin that makes code completion more "
"convenient by using ``<Tab>`` key or any other customized keys."
msgstr ""

#: ../../dev/env.rst:98
msgid "Emacs"
msgstr ""

#: ../../dev/env.rst:100
msgid ""
"Emacs is another powerful text editor. It is fully programmable (Lisp), "
"but it can be some work to wire up correctly. A good start if you're "
"already an Emacs user is `Python Programming in Emacs`_ at EmacsWiki."
msgstr ""

#: ../../dev/env.rst:104
msgid "Emacs itself comes with a Python mode."
msgstr ""

#: ../../dev/env.rst:109
msgid "TextMate"
msgstr ""

#: ../../dev/env.rst:111
msgid ""
"`TextMate <http://macromates.com/>`_ brings Apple's approach to operating"
" systems into the world of text editors. By bridging Unix underpinnings "
"and GUI, TextMate cherry-picks the best of both worlds to the benefit of "
"expert scripters and novice users alike."
msgstr ""

#: ../../dev/env.rst:117
msgid "Sublime Text"
msgstr ""

#: ../../dev/env.rst:119
msgid ""
"`Sublime Text <http://www.sublimetext.com/>`_ is a sophisticated text "
"editor for code, markup, and prose. You'll love the slick user interface,"
" extraordinary features, and amazing performance."
msgstr ""

#: ../../dev/env.rst:123
msgid ""
"Sublime Text has excellent support for editing Python code and uses "
"Python for its plugin API. It also has a diverse variety of plugins, "
"`some of which <https://github.com/SublimeLinter/SublimeLinter>`_ allow "
"for in-editor PEP8 checking and code \"linting\"."
msgstr ""

#: ../../dev/env.rst:129
msgid "Atom"
msgstr ""

#: ../../dev/env.rst:131
msgid ""
"`Atom <https://atom.io/>`_ is a hackable text editor for the 21st "
"century, built on atom-shell, and based on everything we love about our "
"favorite editors."
msgstr ""

#: ../../dev/env.rst:135
msgid ""
"Atom is web native (HTML, CSS, JS), focusing on modular design and easy "
"plugin development. It comes with native package control and a plethora "
"of packages. Recommended for Python development is `Linter "
"<https://github.com/steelbrain/linter>`_ combined with `linter-flake8 "
"<https://github.com/AtomLinter/linter-flake8>`_."
msgstr ""

#: ../../dev/env.rst:142
msgid "Python (on Visual Studio Code)"
msgstr ""

#: ../../dev/env.rst:144
msgid ""
"`Python for Visual Studio "
"<https://marketplace.visualstudio.com/items?itemName=ms-python.python>`_ "
"is an extension for the `Visual Studio Code "
"<https://code.visualstudio.com>`_. This is a free, lightweight, open "
"source code editor, with support for Mac, Windows, and Linux. Built using"
" open source technologies such as Node.js and Python, with compelling "
"features such as Intellisense (autocompletion), local and remote "
"debugging, linting, and the like."
msgstr ""

#: ../../dev/env.rst:148
msgid "MIT licensed."
msgstr ""

#: ../../dev/env.rst:151
msgid "IDEs"
msgstr ""

#: ../../dev/env.rst:154
msgid "PyCharm / IntelliJ IDEA"
msgstr ""

#: ../../dev/env.rst:156
msgid ""
"`PyCharm <http://www.jetbrains.com/pycharm/>`_ is developed by JetBrains,"
" also known for IntelliJ IDEA. Both share the same code base and most of "
"PyCharm's features can be brought to IntelliJ with the free `Python Plug-"
"In <https://plugins.jetbrains.com/plugin/?idea&pluginId=631>`_.  There "
"are two versions of PyCharm: Professional Edition (Free 30-day trial) and"
" Community Edition (Apache 2.0 License) with fewer features."
msgstr ""

#: ../../dev/env.rst:165
msgid "Enthought Canopy"
msgstr ""

#: ../../dev/env.rst:166
msgid ""
"`Enthought Canopy <https://www.enthought.com/product/canopy/>`_ is a "
"Python IDE which is focused towards Scientists and Engineers as it "
"provides pre installed libraries for data analysis."
msgstr ""

#: ../../dev/env.rst:171
msgid "Eclipse"
msgstr ""

#: ../../dev/env.rst:173
msgid ""
"The most popular Eclipse plugin for Python development is Aptana's `PyDev"
" <https://pydev.org>`_."
msgstr ""

#: ../../dev/env.rst:178
msgid "Komodo IDE"
msgstr ""

#: ../../dev/env.rst:180
msgid ""
"`Komodo IDE <https://www.activestate.com/products/komodo-ide/>`_ is "
"developed by ActiveState and is a commercial IDE for Windows, Mac, and "
"Linux. `KomodoEdit <https://github.com/Komodo/KomodoEdit>`_ is the open "
"source alternative."
msgstr ""

#: ../../dev/env.rst:187
msgid "Spyder"
msgstr ""

#: ../../dev/env.rst:189
msgid ""
"`Spyder <https://github.com/spyder-ide/spyder>`_ is an IDE specifically "
"geared toward working with scientific Python libraries (namely `SciPy "
"<https://www.scipy.org/>`_). It includes integration with pyflakes_, "
"`pylint <https://www.logilab.org/857>`_ and `rope <https://github.com"
"/python-rope/rope>`_."
msgstr ""

#: ../../dev/env.rst:195
msgid ""
"Spyder is open source (free), offers code completion, syntax "
"highlighting, a class and function browser, and object inspection."
msgstr ""

#: ../../dev/env.rst:200
msgid "WingIDE"
msgstr ""

#: ../../dev/env.rst:202
msgid ""
"`WingIDE <http://wingware.com/>`_ is a Python specific IDE. It runs on "
"Linux, Windows, and Mac (as an X11 application, which frustrates some Mac"
" users)."
msgstr ""

#: ../../dev/env.rst:205
msgid ""
"WingIDE offers code completion, syntax highlighting, source browser, "
"graphical debugger and support for version control systems."
msgstr ""

#: ../../dev/env.rst:210
msgid "NINJA-IDE"
msgstr ""

#: ../../dev/env.rst:212
msgid ""
"`NINJA-IDE <http://www.ninja-ide.org/>`_ (from the recursive acronym: "
"\"Ninja-IDE Is Not Just Another IDE\") is a cross-platform IDE, specially"
" designed to build Python applications, and runs on Linux/X11, Mac OS X, "
"and Windows desktop operating systems. Installers for these platforms can"
" be downloaded from the website."
msgstr ""

#: ../../dev/env.rst:218
msgid ""
"NINJA-IDE is open source software (GPLv3 licence) and is developed in "
"Python and Qt. The source files can be downloaded from `GitHub "
"<https://github.com/ninja-ide>`_."
msgstr ""

#: ../../dev/env.rst:224
msgid "Eric (The Eric Python IDE)"
msgstr ""

#: ../../dev/env.rst:226
msgid ""
"`Eric <http://eric-ide.python-projects.org/>`_ is a full featured Python "
"IDE offering source code autocompletion, syntax highlighting, support for"
" version control systems, Python 3 support, integrated web browser, "
"python shell, integrated debugger, and a flexible plug-in system. Written"
" in Python, it is based on the Qt GUI toolkit, integrating the Scintilla "
"editor control. Eric is an open source software project (GPLv3 licence) "
"with more than ten years of active development."
msgstr ""

#: ../../dev/env.rst:235
msgid "Mu"
msgstr ""

#: ../../dev/env.rst:237
msgid ""
"`Mu <https://codewith.mu/>`_ is a minimalist Python IDE which can run "
"Python 3 code locally and can also deploy code to the BBC micro:bit and "
"to Adafruit boards running CircuitPython."
msgstr ""

#: ../../dev/env.rst:241
msgid ""
"Intended for beginners, mu includes a Python 3 interpreter, and is easy "
"to install on Windows, OS/X and Linux. It runs well on the Raspberry Pi."
msgstr ""

#: ../../dev/env.rst:244
msgid "There's an active support community on gitter."
msgstr ""

#: ../../dev/env.rst:248
msgid "Interpreter Tools"
msgstr ""

#: ../../dev/env.rst:252
msgid "Virtual Environments"
msgstr ""

#: ../../dev/env.rst:254
msgid ""
"Virtual Environments provide a powerful way to isolate project package "
"dependencies. This means that you can use packages particular to a Python"
" project without installing them system wide and thus avoiding potential "
"version conflicts."
msgstr ""

#: ../../dev/env.rst:256
msgid ""
"To start using and see more information: `Virtual Environments "
"<https://github.com/kennethreitz/python-"
"guide/blob/master/docs/dev/virtualenvs.rst>`_ docs."
msgstr ""

#: ../../dev/env.rst:261
msgid "pyenv"
msgstr ""

#: ../../dev/env.rst:263
msgid ""
"`pyenv <https://github.com/pyenv/pyenv>`_ is a tool to allow multiple "
"versions of the Python interpreter to be installed at the same time.  "
"This solves the problem of having different projects requiring different "
"versions of Python. For example, it becomes very easy to install Python "
"2.7 for compatibility in one project, while still using Python 3.4 as the"
" default interpreter. pyenv isn't just limited to the CPython versions – "
"it will also install PyPy, Anaconda, miniconda, stackless, Jython, and "
"IronPython interpreters."
msgstr ""

#: ../../dev/env.rst:271
msgid ""
"pyenv works by filling a ``shims`` directory with fake versions of the "
"Python interpreter (plus other tools like ``pip`` and ``2to3``).  When "
"the system looks for a program named ``python``, it looks inside the "
"``shims`` directory first, and uses the fake version, which in turn "
"passes the command on to pyenv.  pyenv then works out which version of "
"Python should be run based on environment variables, ``.python-version`` "
"files, and the global default."
msgstr ""

#: ../../dev/env.rst:278
msgid ""
"pyenv isn't a tool for managing virtual environments, but there is the "
"plugin `pyenv-virtualenv <https://github.com/pyenv/pyenv-virtualenv>`_ "
"which automates the creation of different environments, and also makes it"
" possible to use the existing pyenv tools to switch to different "
"environments based on environment variables or ``.python-version`` files."
msgstr ""

#: ../../dev/env.rst:285
msgid "Other Tools"
msgstr ""

#: ../../dev/env.rst:288
msgid "IDLE"
msgstr ""

#: ../../dev/env.rst:290
msgid ""
":ref:`IDLE <python:idle>` is an integrated development environment that "
"is part of the Python standard distribution. It is completely written in "
"Python and uses the Tkinter GUI toolkit. Though IDLE is not suited for "
"full-blown development using Python, it is quite helpful to try out small"
" Python snippets and experiment with different features in Python."
msgstr ""

#: ../../dev/env.rst:296
msgid "It provides the following features:"
msgstr ""

#: ../../dev/env.rst:298
msgid "Python Shell Window (interpreter)"
msgstr ""

#: ../../dev/env.rst:299
msgid "Multi window text editor that colorizes Python code"
msgstr ""

#: ../../dev/env.rst:300
msgid "Minimal debugging facility"
msgstr ""

#: ../../dev/env.rst:304
msgid "IPython"
msgstr ""

#: ../../dev/env.rst:306
msgid ""
"`IPython <http://ipython.org/>`_ provides a rich toolkit to help you make"
" the most out of using Python interactively. Its main components are:"
msgstr ""

#: ../../dev/env.rst:309
msgid "Powerful Python shells (terminal- and Qt-based)"
msgstr ""

#: ../../dev/env.rst:310
msgid ""
"A web-based notebook with the same core features but support for rich "
"media, text, code, mathematical expressions and inline plots"
msgstr ""

#: ../../dev/env.rst:312
msgid "Support for interactive data visualization and use of GUI toolkits"
msgstr ""

#: ../../dev/env.rst:313
msgid "Flexible, embeddable interpreters to load into your own projects"
msgstr ""

#: ../../dev/env.rst:314
msgid "Tools for high level and interactive parallel computing"
msgstr ""

#: ../../dev/env.rst:320
msgid ""
"To download and install IPython with all its optional dependencies for "
"the notebook, qtconsole, tests, and other functionalities:"
msgstr ""

#: ../../dev/env.rst:327
msgid "BPython"
msgstr ""

#: ../../dev/env.rst:329
msgid ""
"`bpython <https://bpython-interpreter.org/>`_ is an alternative interface"
" to the Python interpreter for Unix-like operating systems. It has the "
"following features:"
msgstr ""

#: ../../dev/env.rst:333
msgid "In-line syntax highlighting"
msgstr ""

#: ../../dev/env.rst:334
msgid "Readline-like autocomplete with suggestions displayed as you type"
msgstr ""

#: ../../dev/env.rst:335
msgid "Expected parameter list for any Python function"
msgstr ""

#: ../../dev/env.rst:336
msgid ""
"\"Rewind\" function to pop the last line of code from memory and re-"
"evaluate"
msgstr ""

#: ../../dev/env.rst:337
msgid "Send entered code off to a pastebin"
msgstr ""

#: ../../dev/env.rst:338
msgid "Save entered code to a file"
msgstr ""

#: ../../dev/env.rst:339
msgid "Auto-indentation"
msgstr ""

#: ../../dev/env.rst:340
msgid "Python 3 support"
msgstr ""

#: ../../dev/env.rst:347
msgid "ptpython"
msgstr ""

#: ../../dev/env.rst:349
msgid ""
"`ptpython <https://github.com/prompt-toolkit/ptpython>`_ is a REPL build "
"on top of the `prompt_toolkit <https://github.com/prompt-toolkit/python-"
"prompt-toolkit>`_ library. It is considered to be an alternative to "
"BPython_. Features include:"
msgstr ""

#: ../../dev/env.rst:353
msgid "Syntax highlighting"
msgstr ""

#: ../../dev/env.rst:354
msgid "Autocompletion"
msgstr ""

#: ../../dev/env.rst:355
msgid "Multiline editing"
msgstr ""

#: ../../dev/env.rst:356
msgid "Emacs and Vim Modes"
msgstr ""

#: ../../dev/env.rst:357
msgid "Embedding REPL inside of your code"
msgstr ""

#: ../../dev/env.rst:358
msgid "Syntax validation"
msgstr ""

#: ../../dev/env.rst:359
msgid "Tab pages"
msgstr ""

#: ../../dev/env.rst:360
msgid ""
"Support for integrating with IPython_'s shell, by installing IPython "
"(``pip install ipython``) and running ``ptipython``."
msgstr ""

